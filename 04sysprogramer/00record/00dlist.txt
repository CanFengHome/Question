本书《系统程序员成长计划》
1.学习计算机组成原理和操作系统原理，再看C有种豁然开朗的感觉。

程序员分级：
1.能够写代码解决问题
2.能够设计代码，低耦合、高内聚、稳定、整洁
    1.封装 解决低耦合高内聚
        确保职责单一 隐藏信息。好处：
        1.隔离变化 隐私是程序最容易变化的部分
        2.降低复杂度 接口最小化
        如何封装：
        1.隐藏数据结构
            .c 定义
            .h 声明
            提供创建 销毁 get/set 接口
        2.隐藏内部数据函数
            .h 接口最小化
            .c static 内部函数
        3.禁用全局变量
            除了单例模式，任何时候都禁止全局变量
    2.测试代码 解决稳定
        容易出错问题：
        1.初始化
        2.内存释放
        3.字符串常量按照普通内存处理
        4.越界访问

        
    3.代码规范 解决整洁
        1.命名 文件名 函数名 结构名 变量名 参数名 宏
        2.职责单一原则
3.数学

01.从双向链表学习设计
{
    任务1：
    写一个双向链表
    要求：
        1.确定需求-设计第一步
        2.确定测试需求-设计第二步
        3.确定接口-命名规范 代码风格 设计第三步
        4.编写测试代码
        5.编写代码
        6.运行总结
    
    代码规范：
    1.文件名称 单词小写，多个单词下划线分割
    2.函数名 单词小写 多个单词下划线分割
        1.单一职责
        2.名称直观，如果起名困难，反思是否功能单一
            采用主语(对象)+谓语(动作)
        3.第一个参数为对象，并用thiz
    3.结构 枚举 联合 首字母大写 多个单词连写
    4.宏名 单词大写，多个单词下划线分割
    5.变量名 单词小写 多个单词下划线分割
    6.面向对象命名方式 以对象为中心，采用主语对象+谓语动作
        如dlist_append
    7.对象有创建和销毁函数

    1.需求简述：
        0.接口需求
            0.dlist_create
            1.指定位置insert
            2.首位insert
            3.尾部insert
            4.指定位置delete
            5.头部delete
            6.尾部delete
            7.指定位置get value
            8.头部 get value
            9.尾部 get value
            10.长度
            11.通用查找
            12.通用遍历
            13.dlist_destroy
        1.设计通用双向链表
        2.让C++可以调用
        3.方法调用的状态
        4.容错处理

    2.测试
        0. dlist* ls = dlist_create  ls != null
        1. insert 
            dlist_insert [0, tail, mid] status=ok
            dlist_insert [-1 tail+1] status = invalide_param
        2. prepend
            size + 1
        3. append
            size + 1
        4. delete 
            delete [0, tail, mid] status = ok  size-1
            delete [-1, tail+1] status = invalide_param size

        5. delete_head
            size - 1 & status ok
            status empty

        6. delete_tail
            size - 1 & stauts ok
            status empty
        
        7. get_val_by_index
            [0, tail, mid] not null
            [-1 tail+1] null

        8. getHead check value
        9. getTail check value
        10. len 
        11. find thiz, compareFunc context
        12. foreach thiz, visit context
        13. dlist_destroy

    3.dlist.h dlist.c
        typedef struct _DList DList;
        1.dlist_create
        2.dlist_insert_by_index(DList* thiz, int index, void* data)
        3.dlist_prepend
        4.dlist_append
        5.dlist_pop_by_index int index return data
        6.dlist_pop_head
        7.dlist_pop_tail
        8.dlist_get_val_by_index
        9.dlist_get_head
        10.dlist_get_tail
        11.dlist_length
        12.dlist_find FindFunc
        13.dlist_foreach
        14.dlist_destroy DestroyFunc

    4.code test 
    

}

02.如何高质量代码？
1.分析设计多花时间
    1.确定需求
    2.分析测试需求和对象接口需求
    3.确定测试case
2.编写代码后，阅读至少4遍
    1.第一遍 确定有无明显语法错误、文件and类命名、函数命名、参数命名
    2.第二遍 排查类之间耦合情况，类 方法 职责是否单一
    3.第三遍 阅读函数，重点接口，
        输入是否初始化
        有无容错，
        有无越界，
        有无内存释放问题，
        条件判断是否完备
        多线程共享变量要使用 valotile

        接口分为查询和命令两个类，来进行测试设计
        调用者使用正确参数，保证正确结果，而实现者检查输入参数，确保符合规定。
    4.第四遍 重要逻辑，把自己作为机器进行运算
3.讲给别人听
    假想有一个人在旁边，讲解主要思路，讲解代码