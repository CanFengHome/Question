1.进程间通信常见方式
    1.管道，尤其是匿名管道
    2.信号
    3.共享映射区
    4.socket 可以本机，也可以跨机

2.父进程写，子进程读取并打印到屏幕
    int pipe(int pipefd[2]);

    test_ipc/test_pipe.cpp

3.mmap实现子进程和父进程间通信。子进程写入信息，父进程获取信息
    #include <sys/mman.h>
    void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
    int munmap(void *addr, size_t length);
    MAP_FAILED

    test_ipc/test_mmap.cpp

4.实现文件多进程拷贝
    多进程利用共享mmap的方式 test_ipc/test_process_copy
    也可以利用多进程文件描述符表的不同来处理 test_ipc/test_file_copy.cpp
        和mmap不同的是，打开文件后，可以通过文件IO操作，来拓展文件大小，而不必事先先创建好文件

5.信号
    1.信号的到来会打断一些阻塞，比如read write. 
        见例子 test_signal/test_sigaction.cpp
        如果不ctrl+c，则十秒打印10个*，而一旦ctrl+c 就会打断sleep，加速输出了*，程序很快结束

    2.使用计时系统和alarm来计算累加
        test_signal/test_cal_clock.cpp
        test_signal/test_cal_alarm.cpp

        feng@chencanfeng:~/study/Question/02Linux/test_signal$ time ./test_cal_alarm
        2597985335

        real    0m5.017s
        user    0m5.000s
        sys     0m0.016s
        feng@chencanfeng:~/study/Question/02Linux/test_signal$ time ./test_cal_clock
        3258619

        real    0m5.012s
        user    0m1.750s
        sys     0m3.250s

        从效率来看两者差距甚大，主要原因应该是clock不断的调用系统时钟，而alarm大部分时间在user态
        换成time的方式，会比std::chrono 好一些，但是还是会不断的调用系统函数

    3.间隔打印文件内容
        使用sleep方式 test_signal/test_print_sleep.cpp
        使用alarm方式 test_signal/test_print_alarm.cpp
        使用settimer方式 test_signal/test_print_setitimer.cpp

    4.令牌桶
        流量控制 cps
        上限 burst
        token +- cps
        
        