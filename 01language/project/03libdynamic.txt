src
    add.c
    sub.c
include
    add.h
    sub.h
lib

1. gcc -c -fpic add.c sub.c
2. gcc -shared add.o sub.o -o ../lib/libmycal.so
=============== or 
    gcc -fpic -shared add.c sub.c -o ../lib/libmycal.so

3.use
    gcc main.c -o ../bin/app -L../lib -lmycal

4.ldd
    ldd app

    会看到自己的so未发现
    export LD_LIBRARY_PATH=$.../lib
===============================================================

实践：
目录和静态库的目录一样
src/Makefile
all:
    gcc -Wall -g -std=c99 -I../include -fpic -c add.c -o ../obj/add.o
    gcc -Wall -g -std=c99 -I../include -fpic -c sub.c -o ../obj/sub.o

    gcc -shared ../obj/*.o -o ../lib/libmycal.so
test/Makefile
all:
    gcc -Wall -g -std=c99 -I../include main.c -o bin/app -L../lib -lmycal -Wl,-rpath ...

-Wl的意思是，后面的选项直接交给ld程序处理,-rpath选项是说更改搜索路径为后面的参数./lib



临时测试：
export LD_LIBRARY_PATH=[path]

或者
~/.bashrc 加入
export LD_LIBRARY_PATH=[path]
每次启动终端都会启动
.bashrc修改完成后，需要重新执行 

/etc/ld.so.conf 写入绝对路径

ldd main 可以查看main用了哪些库

库的搜索路径
    1. -I -L
    2.环境变量 在.bash文件里面指定
        C_INCLUDE_PATH LIBRARY_PATH
    3.系统指定的目录
三种方式：
    1.拷贝.so文件到系统共享库路径下 一般在/usr/lib
    2.更改 LD_LIBRARY_PATH
        ~/.bash_profile
        LD_LIBRARY_PATH=[...]:$LD_LIBRARY_PATH
        exprot LD_LIBRARY_PATH
        记得生效
    3. ldconfig
        1.配置ld.so.conf
            vi /etc/ld.so.conf
        2.ldconfig 更新ld.so.cache